// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SupplierType {
  PHYSICAL
  ONLINE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   // "ADMIN" | "SUPPLIER" | "SHOPPER"
  name      String?
  phone     String?
  address   String?

  // 1:1 optional (a supplier can be owned by a user)
  supplier  Supplier?

  // 1:many
  orders    Order[]

  createdAt DateTime @default(now())
}

model Supplier {
  id            String       @id @default(cuid())
  name          String       @unique
  contactEmail  String?
  whatsappPhone String?
  type          SupplierType
  status        String       @default("ACTIVE")

  // Online supplier API creds (optional)
  apiBaseUrl    String?
  apiAuthType   String?      // e.g., "BEARER"
  apiKey        String?

  // Default payout percentage for PHYSICAL suppliers (e.g., 70 = 70%)
  payoutPctInt  Int?

  // Owning user (optional)
  userId        String?      @unique
  user          User?        @relation(fields: [userId], references: [id])

  // Relations
  products       Product[]
  purchaseOrders PurchaseOrder[]
  // Back relation to OrderItem.supplierRel (named relation)
  orderItems     OrderItem[] @relation("OrderItemSupplierRel")

  createdAt     DateTime @default(now())
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
}
// prisma/schema.prisma  (only the changed model shown)

model Product {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Decimal      @db.Decimal(10, 2)
  sku         String
  stock       Int
  vatFlag     Boolean      @default(true)
  status      String       @default("PUBLISHED")
  imagesJson  String[]

  supplier    Supplier     @relation(fields: [supplierId], references: [id])
  supplierId  String
  supplierTypeOverride SupplierType?
  commissionPctInt     Int?

  categoryId   String
  category     Category     @relation(fields: [categoryId], references: [id])

  /// NEW: denormalized name for convenience in responses/filtering
  categoryName String?      // <- add this

  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
}

model Order {
  id         String     @id @default(cuid())

  user       User       @relation(fields: [userId], references: [id])
  userId     String

  total      Decimal    @db.Decimal(10, 2)
  tax        Decimal    @db.Decimal(10, 2)
  shipping   Decimal    @db.Decimal(10, 2)
  status     String     @default("PENDING")
  createdAt  DateTime   @default(now())

  // Back relation for OrderItem.order
  items      OrderItem[]

  // Back relation for PurchaseOrder.order
  purchaseOrders PurchaseOrder[]
}

model OrderItem {
  id          String    @id @default(cuid())

  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String

  product     Product   @relation(fields: [productId], references: [id])
  productId   String

  // keep a direct link to supplier for ease of fulfilment
  supplierRel Supplier  @relation("OrderItemSupplierRel", fields: [supplierId], references: [id])
  supplierId  String

  qty         Int
  unitPrice   Decimal   @db.Decimal(10, 2)  // price snapshot

  // Back relation for PurchaseOrderItem.orderItem
  purchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrder {
  id                 String       @id @default(cuid())

  order              Order        @relation(fields: [orderId], references: [id])
  orderId            String

  supplier           Supplier     @relation(fields: [supplierId], references: [id])
  supplierId         String

  subtotal           Decimal      @db.Decimal(10, 2)
  platformFee        Decimal      @db.Decimal(10, 2)
  supplierAmount     Decimal      @db.Decimal(10, 2)
  payoutPctInt       Int
  status             String       @default("CREATED")
  whatsappMsgId      String?
  createdAt          DateTime     @default(now())

  // Back relation for PurchaseOrderItem.purchaseOrder
  items              PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               String         @id @default(cuid())

  purchaseOrder    PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String

  orderItem        OrderItem      @relation(fields: [orderItemId], references: [id])
  orderItemId      String

  // For ONLINE suppliers
  externalRef      String?
  externalStatus   String?
  receiptUrl       String?
}
